services:
  # ========================================
  # INFRASTRUCTURE SERVICES
  # ========================================
  
  # MongoDB
  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: devandre
      MONGO_INITDB_ROOT_PASSWORD: passw0rd1
    volumes:
      - mongodb_data:/data/db
      - ./mongodb-init:/docker-entrypoint-initdb.d
    networks:
      - finnova-network
    healthcheck:
      test: [
        "CMD", "mongosh",
        "--authenticationDatabase", "admin",
        "-u", "devandre",
        "-p", "passw0rd1",
        "--eval", "db.adminCommand('ping')"
      ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s

  # Redis
  redis:
    image: redis:8.2.2-alpine
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redis123
    volumes:
      - redis_data:/data
    networks:
      - finnova-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Zookeeper (for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.9.4
    container_name: zookeeper
    restart: always
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - finnova-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.9.4
    container_name: kafka
    restart: always
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - finnova-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Kafka UI - Web interface for Kafka
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "9001:9001"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      DYNAMIC_CONFIG_ENABLED: 'true'
    networks:
      - finnova-network

  # ========================================
  # MICROSERVICES - INFRASTRUCTURE
  # ========================================

  # Config Server
#  config-server:
#    build:
#      context: ./config-server
#      dockerfile: Dockerfile
#    image: config-server:1.0.0
#    container_name: config-server
#    restart: always
#    ports:
#      - "8888:8888"
#    environment:
#      SPRING_PROFILES_ACTIVE: native
#    volumes:
#      - ./config-server/logs:/app/logs
#    networks:
#      - finnova-network
#    healthcheck:
#      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8888/actuator/health"]
#      interval: 30s
#      timeout: 10s
#      retries: 5
#      start_period: 60s
#
#  # Eureka Server
#  eureka-server:
#    build:
#      context: ./eureka-server
#      dockerfile: Dockerfile
#    image: eureka-server:1.0.0
#    container_name: eureka-server
#    restart: always
#    ports:
#      - "8761:8761"
#    environment:
#      SPRING_CONFIG_IMPORT: configserver:http://config-server:8888
#      SPRING_PROFILES_ACTIVE: docker
#    volumes:
#      - ./eureka-server/logs:/app/logs
#    depends_on:
#      config-server:
#        condition: service_healthy
#    networks:
#      - finnova-network
#    healthcheck:
#      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8761/actuator/health"]
#      interval: 30s
#      timeout: 10s
#      retries: 5
#      start_period: 60s
#
#  # API Gateway
#  api-gateway:
#    build:
#      context: ./api-gateway
#      dockerfile: Dockerfile
#    image: api-gateway:1.0.0
#    container_name: api-gateway
#    restart: always
#    ports:
#      - "8080:8080"
#    environment:
#      SPRING_CONFIG_IMPORT: configserver:http://config-server:8888
#      SPRING_PROFILES_ACTIVE: docker
#      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
#      SPRING_DATA_REDIS_HOST: redis
#      SPRING_DATA_REDIS_PORT: 6379
#      SPRING_DATA_REDIS_PASSWORD: redis123
#    volumes:
#      - ./api-gateway/logs:/app/logs
#    depends_on:
#      config-server:
#        condition: service_healthy
#      eureka-server:
#        condition: service_healthy
#      redis:
#        condition: service_healthy
#    networks:
#      - finnova-network
#    healthcheck:
#      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
#      interval: 30s
#      timeout: 10s
#      retries: 5
#      start_period: 60s

# ========================================
# NETWORKS
# ========================================
networks:
  finnova-network:
    driver: bridge
    name: finnova-network

# ========================================
# VOLUMES
# ========================================
volumes:
  mongodb_data:
    name: mongodb_data
  redis_data:
    name: redis_data
  zookeeper_data:
    name: zookeeper_data
  zookeeper_logs:
    name: zookeeper_logs
  kafka_data:
    name: kafka_data